"""
ุชูุธูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงุฎุชุจุงุฑ ุงููุธุงู ุงูุฌุฏูุฏ
"""

import asyncio
from app.db.database import AsyncSessionLocal
from app.models.legal_knowledge import LawArticle, LawSource, KnowledgeChunk, KnowledgeDocument
from sqlalchemy import delete

async def clean_database():
    """ุชูุธูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    
    print("๐งน ุชูุธูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
    
    async with AsyncSessionLocal() as db:
        try:
            # ุญุฐู ุฌููุน ุงูุจูุงูุงุช
            await db.execute(delete(KnowledgeChunk))
            await db.execute(delete(LawArticle))
            await db.execute(delete(LawSource))
            await db.execute(delete(KnowledgeDocument))
            
            await db.commit()
            print("โ ุชู ุชูุธูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ")
            
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุชูุธูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
            await db.rollback()

async def test_upload():
    """ุงุฎุชุจุงุฑ ุฑูุน ุงูููู"""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุฑูุน ููู saudi_labor_law.json...")
    
    try:
        from app.services.document_parser_service import DocumentUploadService
        
        async with AsyncSessionLocal() as db:
            # ูุฑุงุกุฉ ุงูููู
            with open('data_set/files/saudi_labor_law.json', 'rb') as f:
                file_content = f.read()
            
            # ุฅูุดุงุก ุฎุฏูุฉ ุงูุฑูุน
            upload_service = DocumentUploadService(db)
            
            # ุฑูุน ุงููุซููุฉ
            result = await upload_service.upload_document(
                file_content=file_content,
                filename="saudi_labor_law.json",
                title="ูุธุงู ุงูุนูู ุงูุณุนูุฏู",
                category="law",
                uploaded_by=1
            )
            
            print(f"โ ุชู ุฑูุน ุงููุซููุฉ ุจูุฌุงุญ!")
            print(f"๐ ูุนุฑู ุงููุซููุฉ: {result['document_id']}")
            print(f"๐ ูุตุงุฏุฑ ูุงููููุฉ: {result['law_sources_processed']}")
            print(f"๐ ููุงุฏ: {result['articles_processed']}")
            print(f"๐ฆ chunks: {result['chunks_created']}")
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฑูุน ุงููุซููุฉ: {e}")
        import traceback
        traceback.print_exc()

async def check_results():
    """ูุญุต ุงููุชุงุฆุฌ"""
    
    print("\n๐ ูุญุต ุงููุชุงุฆุฌ...")
    
    async with AsyncSessionLocal() as db:
        from sqlalchemy import select
        
        # ูุญุต ุงููุตุงุฏุฑ ุงููุงููููุฉ
        sources_result = await db.execute(select(LawSource))
        sources = sources_result.scalars().all()
        print(f"๐ ุนุฏุฏ ุงููุตุงุฏุฑ ุงููุงููููุฉ: {len(sources)}")
        
        # ูุญุต ุงูููุงุฏ
        articles_result = await db.execute(select(LawArticle))
        articles = articles_result.scalars().all()
        print(f"๐ ุนุฏุฏ ุงูููุงุฏ: {len(articles)}")
        
        # ูุญุต ุงูู chunks
        chunks_result = await db.execute(select(KnowledgeChunk))
        chunks = chunks_result.scalars().all()
        print(f"๐ฆ ุนุฏุฏ ุงูู chunks: {len(chunks)}")
        
        # ุนุฑุถ ุจุนุถ ุงูููุงุฏ
        if articles:
            print(f"\n๐ ุจุนุถ ุงูููุงุฏ:")
            for i, article in enumerate(articles[:5]):
                print(f"   {i+1}. {article.article_number}: {article.content[:50]}...")
            
            if len(articles) > 5:
                print(f"   ... ู {len(articles) - 5} ููุงุฏ ุฃุฎุฑู")

async def main():
    """ุชุดุบูู ุงูุงุฎุชุจุงุฑ ุงููุงูู"""
    
    print("๐ ุจุฏุก ุงูุงุฎุชุจุงุฑ ุงููุงูู ูููุธุงู ุงูุฌุฏูุฏ\n")
    
    # ุชูุธูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    await clean_database()
    
    # ุงุฎุชุจุงุฑ ุงูุฑูุน
    await test_upload()
    
    # ูุญุต ุงููุชุงุฆุฌ
    await check_results()
    
    print("\n๐ ุงูุชูู ุงูุงุฎุชุจุงุฑ!")

if __name__ == "__main__":
    asyncio.run(main())
