name: FastAPI Backend Deployment to Hostinger

on:
  push:
    branches: [ main, master, develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y python3-dev build-essential pkg-config libffi-dev \
            libssl-dev libjpeg-dev zlib1g-dev curl
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        
    - name: Generate deployment files
      run: |
        mkdir -p deploy_files
        
        # Create production startup script
        cat > deploy_files/start_production.py << 'EOF'
        #!/usr/bin/env python
        """
        Production startup script for FastAPI Backend
        """
        import os
        import sys
        import uvicorn
        from pathlib import Path
        
        # Add the project root to Python path
        project_root = Path(__file__).parent
        sys.path.insert(0, str(project_root))
        
        # Set production environment variables
        os.environ.setdefault('ENVIRONMENT', 'production')
        os.environ.setdefault('LOG_LEVEL', 'INFO')
        
        if __name__ == "__main__":
            print("🚀 Starting FastAPI Backend - Production Mode")
            print("🌐 Server: 0.0.0.0:8000")
            print("📊 Environment: Production")
            
            # Start the FastAPI application
            uvicorn.run(
                "app.main:app",
                host="0.0.0.0",
                port=8000,
                reload=False,
                workers=1,
                log_level="info"
            )
        EOF
        
        # Create production deployment script
        cat > deploy_files/deploy_production.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting FastAPI Backend Production Deployment..."
        echo "📅 Deployment Time: $(date)"
        
        cd /home/$USER/legatoo_backend
        
        # Stop old processes
        echo "🛑 Stopping old backend processes..."
        pkill -f "start_production.py" || true
        pkill -f "uvicorn" || true
        sleep 2
        
        # Detect and install best available Python version
        echo "🐍 Detecting best available Python version..."
        PYTHON_BIN=""
        
        # Try different Python versions in order of preference
        for version in python3.12 python3.11 python3.10 python3.9 python3.8; do
            if command -v $version &> /dev/null; then
                # Check if version is >= 3.8
                VERSION_NUM=$($version -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
                MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
                MINOR=$(echo $VERSION_NUM | cut -d. -f2)
                
                if [ "$MAJOR" -gt 3 ] || ([ "$MAJOR" -eq 3 ] && [ "$MINOR" -ge 8 ]); then
                    PYTHON_BIN=$version
                    echo "✅ Found suitable Python: $version (version $VERSION_NUM)"
                    break
                else
                    echo "⚠️  Python $version found but version $VERSION_NUM is too old (need >= 3.8)"
                fi
            fi
        done
        
        if [ -z "$PYTHON_BIN" ]; then
            echo "❌ No suitable Python version found (>= 3.8 required)!"
            echo "⚠️  Cannot install Python via apt (no sudo privileges on shared hosting)"
            echo "📋 Checking if any Python version is available for fallback..."
            
            # Try to find ANY Python version as last resort
            for version in python3.7 python3 python; do
                if command -v $version &> /dev/null; then
                    VERSION_NUM=$($version -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
                    echo "⚠️  Found Python $version (version $VERSION_NUM) - using as fallback"
                    echo "⚠️  WARNING: This version is older than recommended (3.8+)"
                    PYTHON_BIN=$version
                    break
                fi
            done
            
            if [ -z "$PYTHON_BIN" ]; then
                echo "❌ No Python installation found at all!"
                echo "💡 Please contact Hostinger support to install Python 3.8+ or request sudo access"
                exit 1
            fi
        fi
        
        echo "🐍 Using Python: $PYTHON_BIN"
        $PYTHON_BIN --version
        
        # Create virtual environment
        echo "🏗️ Creating virtual environment..."
        
        # Check if venv module is available
        if $PYTHON_BIN -m venv --help &> /dev/null; then
            $PYTHON_BIN -m venv venv
            echo "✅ Virtual environment created successfully!"
        else
            echo "⚠️  venv module not available, trying alternative methods..."
            
            # Try virtualenv if available
            if command -v virtualenv &> /dev/null; then
                echo "📦 Using virtualenv..."
                virtualenv -p $PYTHON_BIN venv
            else
                echo "⚠️  No virtual environment tool available"
                echo "⚠️  WARNING: Installing packages globally (not recommended)"
                echo "⚠️  Consider contacting Hostinger support to enable venv module"
                
                # Create a fake activation script that does nothing
                mkdir -p venv/bin
                cat > venv/bin/activate << 'FAKE_EOF'
# Fake activation script for environments without venv support
echo "⚠️  Warning: No virtual environment active"
FAKE_EOF
                chmod +x venv/bin/activate
            fi
        fi
        
        # Activate virtual environment
        echo "🔌 Activating virtual environment..."
        source venv/bin/activate
        
        echo "✅ Environment setup completed!"
        
        # Install Python dependencies in virtual environment
        echo "📦 Installing Python dependencies in virtual environment..."
        pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        
        # Verify critical dependencies
        echo "✅ Verifying dependencies..."
        python -c "import fastapi, uvicorn, sqlalchemy, aiofiles; print('All dependencies verified successfully!')"
        
        # Run database migrations
        echo "🗄️ Running database migrations..."
        python -c "
        import asyncio
        from app.db.database import create_tables
        asyncio.run(create_tables())
        print('Database tables created/updated successfully!')
        "
        
        # Start production backend using virtual environment (or fallback to system Python)
        echo "▶️ Starting FastAPI backend in production mode..."
        
        # Check if venv/bin/python exists, otherwise use the detected Python binary
        if [ -f "venv/bin/python" ]; then
            echo "🐍 Using virtual environment Python: venv/bin/python"
            nohup venv/bin/python start_production.py > production.log 2>&1 &
        else
            echo "⚠️  Virtual environment Python not found, using system Python: $PYTHON_BIN"
            nohup $PYTHON_BIN start_production.py > production.log 2>&1 &
        fi
        
        BACKEND_PID=$!
        
        # Wait for startup
        echo "⏳ Waiting for backend to start..."
        sleep 10
        
        # Check if process is still running
        if ! kill -0 $BACKEND_PID 2>/dev/null; then
            echo "❌ Backend process died during startup"
            echo "📋 Checking logs..."
            tail -20 production.log
            exit 1
        fi
        
        echo "✅ FastAPI Backend deployed successfully!"
        echo "🌐 API Documentation: https://yourdomain.com/api/docs"
        echo "🔐 Health Check: https://yourdomain.com/api/health"
        echo "📊 Process ID: $BACKEND_PID"
        EOF
        
        chmod +x deploy_files/start_production.py
        chmod +x deploy_files/deploy_production.sh

    - name: Upload backend project to Hostinger
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        password: ${{ secrets.HOSTINGER_PASSWORD }}
        port: ${{ secrets.HOSTINGER_PORT }}
        source: "."
        target: "/home/${{ secrets.HOSTINGER_USERNAME }}/legatoo_backend/"
        strip_components: 0

    - name: Execute production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        password: ${{ secrets.HOSTINGER_PASSWORD }}
        port: ${{ secrets.HOSTINGER_PORT }}
        timeout: 120s
        command_timeout: 120s
        script: |
          cd /home/${{ secrets.HOSTINGER_USERNAME }}/legatoo_backend
          chmod +x deploy_files/deploy_production.sh
          ./deploy_files/deploy_production.sh

    - name: Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        password: ${{ secrets.HOSTINGER_PASSWORD }}
        port: ${{ secrets.HOSTINGER_PORT }}
        timeout: 30s
        command_timeout: 30s
        script: |
          echo "🧪 Performing health check..."
          
          # Wait a bit more for full startup
          sleep 5
          
          # Check if backend is responding
          if curl -s -f http://localhost:8000/health > /dev/null; then
            echo "✅ Health check passed! Backend is running correctly."
            echo "🌐 Backend is accessible at: http://localhost:8000"
            echo "📊 API Documentation: http://localhost:8000/docs"
            echo "🔐 Health endpoint: http://localhost:8000/health"
            
            # Show process info
            echo "📋 Backend process information:"
            ps aux | grep -E "(start_production|uvicorn)" | grep -v grep || echo "No backend processes found"
            
          else
            echo "❌ Health check failed!"
            echo "📋 Checking backend logs..."
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/legatoo_backend
            if [ -f production.log ]; then
              echo "--- Recent logs ---"
              tail -30 production.log
            else
              echo "No production.log found"
            fi
            
            echo "📋 Checking process status..."
            ps aux | grep -E "(start_production|uvicorn)" | grep -v grep || echo "No backend processes running"
            
            exit 1
          fi
