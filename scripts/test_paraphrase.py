"""Test paraphrase-multilingual model (best multilingual model)."""
import asyncio
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.db.database import AsyncSessionLocal
from app.services.arabic_legal_embedding_service import ArabicLegalEmbeddingService

async def test():
    async with AsyncSessionLocal() as db:
        print("Testing paraphrase-multilingual-mpnet (best for semantic search)...")
        svc = ArabicLegalEmbeddingService(db, model_name='paraphrase-multilingual')
        svc.initialize_model()
        print("‚úÖ Model loaded!")
        
        # Sanity test
        print("\nüß™ Testing...")
        text1 = "ÿ™ÿ≤ŸàŸäÿ± ÿ∑ÿßÿ®ÿπ"
        text2 = "ÿ™ÿ≤ŸàŸäÿ± ÿßŸÑÿ∑Ÿàÿßÿ®ÿπ"
        text3 = "ÿ¥ÿ±ÿßÿ° ÿ≥Ÿäÿßÿ±ÿ©"
        
        emb1 = svc.encode_text(text1)
        emb2 = svc.encode_text(text2)
        emb3 = svc.encode_text(text3)
        
        sim_same = svc.cosine_similarity(emb1, emb1)
        sim_similar = svc.cosine_similarity(emb1, emb2)
        sim_different = svc.cosine_similarity(emb1, emb3)
        
        print(f"‚úÖ Identical: {sim_same:.4f} (expected: 1.0000)")
        print(f"‚úÖ Similar: {sim_similar:.4f} (expected: > 0.70)")
        print(f"‚ùå Different: {sim_different:.4f} (expected: < 0.50)")
        
        # Test with real legal query
        query = "ÿπŸÇŸàÿ®ÿ© ÿ™ÿ≤ŸàŸäÿ± ÿßŸÑÿ∑Ÿàÿßÿ®ÿπ"
        chunk = "**ÿ™ÿ≤ŸàŸäÿ± ÿ∑ÿßÿ®ÿπ**\n\nŸÖŸÜ **ÿ≤Ÿàÿ± ÿ∑ÿßÿ®ÿπÿßŸã** ŸäÿπÿßŸÇÿ® **ÿ®ÿßŸÑÿ≥ÿ¨ŸÜ ŸÖÿØÿ© ŸÑÿß ÿ™ÿ™ÿ¨ÿßŸàÿ≤ ÿÆŸÖÿ≥ ÿ≥ŸÜŸàÿßÿ™**"
        
        emb_q = svc.encode_text(query)
        emb_c = svc.encode_text(chunk)
        sim_legal = svc.cosine_similarity(emb_q, emb_c)
        
        print(f"\nüîç Legal query similarity: {sim_legal:.4f} (expected: > 0.70)")
        
        print(f"\nEmbedding dimension: {len(emb1)}")
        
        if sim_similar > 0.70 and sim_different < 0.50 and sim_legal > 0.70:
            print("\nüéâ SUCCESS! This model works PERFECTLY for Arabic legal search!")
        elif sim_legal > 0.60:
            print("\n‚úÖ GOOD! This model works well enough for Arabic")
        else:
            print("\n‚ö†Ô∏è Results not ideal")

if __name__ == "__main__":
    asyncio.run(test())

